t := [];
p := 11;
Fp := FiniteField(p);
Fp_ := SetToIndexedSet(Set(Fp));
p_ := Fp_[11] + 1;
R<x>:=PolynomialRing(Fp);
xx := elt<R|0,1>;
// Перебираем параметры кривой a и b
while p le 15 do
for a in Fp_ do
	for b in Fp_ do
		print "a = ", a, "b = ", b;
		
		// Если кривая сингулярна, то это плохая кривая
		if (4*(a^3) + 27*(b^2)) eq 0 then
				print "Singularity!!!"; 
				break;
		end if;
		
		f := elt< R | b, a, 0, 1 >; // = Y^2
		//g1 := (x^p)mod f - x;
		g1 := Modexp(xx, p, f) - xx;
		g := [f, g1];
		i0 := 1;
		i1 := 2;
		i2 := 3;
		k := 1;
		i := 0;
		while g[i1] ne 0 do
			g[i2] := (g[i0])mod g[i1];
			k := i0;
			i0 := i1;
			i1 := i2;
			i2 := k;
		end while;
		if Degree(g[i0]) ne 0 then
			t[1] := 0;
		else
			t[1] := 1;
		end if;


		// Вычисляем L
		l := 2;
		mass_l := [];
		mass_l[1] := l; 
		product_of_a_sequence := l;
		lower_bound := 4 * (p ^ (1/2));
		i := 2;
		while product_of_a_sequence le lower_bound do
			l := NextPrime(l);
			mass_l[i] := l; 
			product_of_a_sequence := product_of_a_sequence * l;
			i +:= 1;
		end while;
		L := NextPrime(l) * NextPrime(l);
		//L;
		length_mass_l := i - 1;

		psy := [];
		psy[1] := elt< R | 0 >;
		psy[2] := elt< R | 1 >;
		psy[3] := elt< R | 2 >;
		psy[4] := elt< R | -(a^2), 12*b, 6*a, 0, 3 >;
		psy[5] := elt< R | -32*b*b-4*a*a*a, -16*a*b, -20*a*a, 80*b, 20*a, 0, 4 >;
		n := 2;
		while 0 eq 0 do
			psy[2*n+1] := psy[n+1] * (psy[n+3] * psy[n] * psy[n] - psy[n-1] * psy[n+2] * psy[n+2]) / 2;
			//print "psy[", 2*n, "]:\n", psy[2*n+1];
			if (2*n + 1) eq (L+2) then
				break;
			end if;
			if ((n+1) mod 2) eq 1 then
				psy[2*n+2] := f * f * (psy[n+3] * psy[n+1] * psy[n+1] * psy[n+1]) - psy[n+2] * psy[n+2] * psy[n+2] * psy[n];
			else
				psy[2*n+2] := psy[n+3] * psy[n+1] * psy[n+1] * psy[n+1] - (psy[n+2] * psy[n+2] * psy[n+2] * psy[n]) * f * f;
			end if;
			//print "psy[", 2*n+1, "]:\n", psy[2*n+2];
			if (2*n + 2) eq (L+2) then
				break;
			end if;
			n +:= 1;
		end while;

		// Составим список точек на кривой
		x1 := [* *];
		y1 := [* *];
		x_2 := Fp_[2];
		for x_2 in Fp_ do
			y_2 := (x_2) ^ 3 + a * (x_2) + b;
			//if x_2 eq Fp_[1] then
			  //  continue;
			//end if;
			if IsSquare(y_2) eq true then
				y1 := Append(y1, Sqrt(y_2));
				x1 := Append(x1, x_2);
				if -Sqrt(y_2) ne Fp_[1] then
					y1 := Append(y1, -Sqrt(y_2));
					x1 := Append(x1, x_2);
				end if;
			end if;
		end for;

		// Вычислим порядки всех точек на кривой и заполним результатом списки x3_ и y3_
		x3_ := [* *];
		y3_ := [* *];
		Array_x3_ := [];
		Array_y3_ := [];
		j := 1;
		while j le #x1 do
			//print "x1[j] = ", x1[j], "y1[j] = ", y1[j];
			x3_ := Append(x3_, x1[j]);
			y3_ := Append(y3_, y1[j]);
			// Вычисляем порядки точки по формуле сложения из книги Глухова "Введение в теоретико-числовые методы криптографии"
			repeat
				if x1[j] eq x3_[#x3_] then
					if y1[j] eq -y3_[#y3_] then
						break;
					else
						lambda := ((3 * x3_[#x3_] * x3_[#x3_] + a) * ((2 * y3_[#y3_]) ^ (-1)));
					end if;
				else
					//print "(x3_[#x3_] - x1[j]) = ", (x3_[#x3_] - x1[j]);
					lambda := ((y3_[#y3_] - y1[j]) * ((x3_[#x3_] - x1[j]) ^ (-1)));
					
				   // print "lambda = ", lambda;
				end if;
				//print "(", x3_[#x3_], ", ", y3_[#y3_], ")";
				x_1 := x3_[#x3_];
				x3_ := Append(x3_, (lambda ^ 2) - x3_[#x3_] - x1[j]);
				y3_ := Append(y3_, -(lambda * (x3_[#x3_] - x_1) + y3_[#y3_]));
			until (x3_[#x3_] eq x1[j]) and (-y3_[#x3_] eq y1[j]);
			Array_x3_[j] := x3_;
			Array_y3_[j] := y3_;
			j +:= 1;
			x3_ := [* *];
			y3_ := [* *];
		end while;

		// Вычислим порядки всех точек на кривой и заполним результатом списки x3 и y3
		x3 := [* *];
		y3 := [* *];
		Array_x3 := [];
		Array_y3 := [];
		j := 1;
		while j le #x1 do
			n1 := 2;
			x3 := Append(x3, x1[j]);
			y3 := Append(y3, y1[j]);
			//print "x1[j] = ", x1[j], "y1[j] = ", y1[j];
			repeat 
				// Вычисляем значения полиномов при заданном x по теореме 7.5.5 Крэндалл
				psy2 := Evaluate(psy[n1+2], x1[j]);
				if n1 mod 2 eq 0 then
					psy_1 := y1[j] * Evaluate(psy[n1-1], x1[j]);
					psy0 := Evaluate(psy[n1], x1[j]);
					psy1 := y1[j] * Evaluate(psy[n1+1], x1[j]);
					psy5 := y1[j] * Evaluate(psy[n1+3], x1[j]);
					res1 := psy0 * psy2;
				else
					psy_1 := Evaluate(psy[n1-1], x1[j]);
					psy1 := Evaluate(psy[n1+1], x1[j]);
					psy0 := Evaluate(psy[n1], x1[j]);
					psy5 := Evaluate(psy[n1+3], x1[j]);
					res1 := (y1[j] ^ 2) * psy0 * psy2;
				end if;
				res2 := psy1 ^ 2;
				if res2 eq 0 then
					break;
				end if;
				x3 := Append(x3, Evaluate(x, x1[j]) - (res1 / res2));
				if n1 mod 2 eq 0 then
					res1 := psy5 * (psy0 ^ 2) - psy_1 * (psy2 ^ 2);
				else
					res1 := (y1[j] ^ 2) * (psy5 * (psy0 ^ 2) - psy_1 * (psy2 ^ 2));
				end if;
				res2 := 4 * y1[j] * psy1 ^ 3;
				y3 := Append(y3, res1 / res2);
				//print "(", x3[#x3], ", ", y3[#y3], ") n1 = ", n1;
				n1 +:= 1;
			until (x3[#x3] eq x1[j]) and ((-y3[#x3]) eq y1[j]);
			if (Array_x3_[j] eq x3) and (Array_y3_[j] eq y3) then
				print "yes";
			else
				print "NOO!!!!!!!!!!!!!!!";
			end if;
			j +:= 1;
			x3 := [* *];
			y3 := [* *];
		end while;
	end for;
end for;
p := NextPrime(p);
end while;