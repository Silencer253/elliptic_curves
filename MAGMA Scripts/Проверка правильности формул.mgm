t := [];
p := 101;
Fp := FiniteField(p);
Fp_ := SetToIndexedSet(Set(Fp));
R<x>:=PolynomialRing(Fp);
a := 3;
b := 4;
f := elt< R | b, a, 0, 1 >; // = Y^2

// Вычисляем L
l := 2;
mass_l := [];
mass_l[1] := l; 
product_of_a_sequence := l;
lower_bound := 4 * (p ^ (1/2));
i := 2;
while product_of_a_sequence le lower_bound do
    l := NextPrime(l);
    mass_l[i] := l; 
    product_of_a_sequence := product_of_a_sequence * l;
    i +:= 1;
end while;
L := l;
length_mass_l := i - 1;

// Вычисляем полиномы деления
psy := [];
shift := 1;
psy[0+shift] := elt< R | 0 >;
psy[1+shift] := elt< R | 1 >;
psy[2+shift] := elt< R | 2 >;
psy[3+shift] := elt< R | -(a^2), 12*b, 6*a, 0, 3 >;
psy[4+shift] := elt< R | -32*b*b-4*a*a*a, -16*a*b, -20*a*a, 80*b, 20*a, 0, 4 >;
n := 2;
while 0 eq 0 do
	psy[2*n+shift] := psy[n+1] * (psy[n+3] * psy[n] * psy[n] - psy[n-1] * psy[n+2] * psy[n+2]) / 2;
	//print "psy[", 2*n, "]:\n", psy[2*n+1];
	if (2*n + 1) eq (L+2) then
		break;
	end if;
	if ((n+1) mod 2) eq 1 then
		psy[2*n+2] := f * f * (psy[n+3] * psy[n+1] * psy[n+1] * psy[n+1]) - psy[n+2] * psy[n+2] * psy[n+2] * psy[n];
	else
		psy[2*n+2] := psy[n+3] * psy[n+1] * psy[n+1] * psy[n+1] - (psy[n+2] * psy[n+2] * psy[n+2] * psy[n]) * f * f;
	end if;
	//print "psy[", 2*n+1, "]:\n", psy[2*n+2];
	if (2*n + 2) eq (L+2) then
		break;
	end if;
	n +:= 1;
end while;

p_ := p mod mass_l[2];
print "l = ", mass_l[2], "p_ = ",p_; 
X := elt< R | 0, 1 >;
u := Modexp(X, p, psy[mass_l[2]+shift]);
print "u = ",u;
v := Modexp(f, (p - 1) div 2, psy[mass_l[2]+shift]);
print "v = ",v;
N_0 := u;
D_0 := psy[1+shift];
M_0 := v;
C_0 := psy[1+shift];
print "Point P_0:\nN_0:", N_0;
print "D_0:", D_0;
print "M_0:", M_0;
print "C_0:", C_0,"\n";
    
// Считаем P_1
N_1 := Modexp(u, p, psy[mass_l[2]+shift]);
print "Point P_1:\nN_1(X):",N_1;
D_1 := psy[1+shift];
print "D_1(X):",D_1;
M_1 := Modexp(v, p+1, psy[mass_l[2]+shift]);
print "M_1(X):",M_1;
C_1 := psy[1+shift];
print "C_1(X):",C_1,"\n";

// Считаем P_2
print "P_2:\np_ % 2 == 0";
//psy[3+shift] := elt< R | 98, 16, 6, 0, 1 >;
N_2 := X * psy[2+shift] * psy[2+shift] * f - psy[1+shift] * psy[3+shift];
N_2 := N_2 mod psy[3+shift];
print "N_2: ", N_2;
D_2 := psy[2+shift] * psy[2+shift] * f;
print "D_2: ", D_2;
M_2 := psy[4+shift] * psy[1+shift] * psy[1+shift] - psy[0+shift] * psy[3+shift] * psy[3+shift];
M_2 := M_2 mod psy[3+shift];
print "M_2: ", M_2;
C_2 := 4 * psy[2+shift] * psy[2+shift] * psy[2+shift] * f * f;
C_2 := C_2 mod psy[3+shift];
print "C_2: ",C_2,"\n";

// Проверяем равенство P_1 + P_2 == O
if ((N_1 * D_2) mod psy[3+shift]) eq (N_2 mod psy[3+shift]) then
    if ((M_1 * C_2) mod psy[3+shift]) eq ((-M_2) mod psy[3+shift]) then
        print "return 0;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    end if;
end if;

// P_4 = P_1 + P_2 
Op1 := (N_1 * D_2) mod psy[3+shift];
Op2 := (N_2 * D_1) mod psy[3+shift];
(Coefficient(Op1, 2) ^ (-1)) * Op1;
(Coefficient(Op2, 2) ^ (-1)) * Op2;
if Op1 eq Op2 then 
    print "x1 == x2";
else
    print "x1 != x2";
end if;

Evaluate(N_1, 4);
22 * Evaluate(M_1, 4);
Evaluate(N_2, 4) / Evaluate(D_2, 4);
22 * Evaluate(M_2, 4) / Evaluate(C_2, 4);

a1 := C_2 * M_1 - M_2;
a2 := N_1 * D_2 - N_2;
N_4 := f * (a1^2) * (D_2^3) - (N_1 * D_2 + N_2) * ((N_1 * D_2 - N_2) ^ 2) * (C_2^2);
//N_4 := N_4 mod psy[3+shift]; 
D_4 := ((C_2 * a2) ^ 2) * D_2;
//D_4 := D_4 mod psy[3+shift];
M_4 := -(D_2 * a1 * (N_4 - N_1 * D_4) + M_1 * C_2 * D_4 * a2);
//M_4 := M_4 mod psy[3+shift];
C_4 := C_2 * D_4 * a2;
//C_4 := C_4 mod psy[3+shift];
Evaluate(N_4, 4) / Evaluate(D_4, 4);
22 * Evaluate(M_4, 4) / Evaluate(C_4, 4);
//print "P_4:\nN_4:", N_4;
//print "D_4:", D_4;
//print "M_4:", M_4;
//print "C_4:",C_4,"\n";

// P_3 = P_0
N_3 := N_0;
D_3 := D_0;
M_3 := M_0;
C_3 := C_0;

Op1 := (N_4 * D_3) mod psy[3+shift];
Op2 := (N_3 * D_4) mod psy[3+shift];
if Op1 eq Op2 then
    Op1 := (M_4 * C_3) mod psy[3+shift];
    Op2 := (M_3 * C_4) mod psy[3+shift];
    if Op1 eq Op2 then
        print "return k;!!!!!!!!00000000000000000000000000000!!!!!!!!!!!!!!!!!!!!!!!!", 1;
    end if;
end if;

p_ := p mod mass_l[3];
print "l = ", mass_l[3], "p_ = ", p_; 
u := Modexp(X, p, psy[mass_l[3]+shift]);
print "u = ",u;
v := Modexp(f, (p - 1) div 2, psy[mass_l[3]+shift]);
print "v = ",v;
N_0 := u;
D_0 := psy[1+shift];
M_0 := v;
C_0 := psy[1+shift];
//print "Point P_0:\nN_0:", N_0;
//print "D_0:", D_0;
//print "M_0:", M_0;
//print "C_0:", C_0,"\n";

// Считаем P_1
N_1 := Modexp(u, p, psy[mass_l[3]+shift]);
print "Point P_1:\nN_1(X):",N_1;
D_1 := psy[1+shift];
print "D_1(X):",D_1;
M_1 := Modexp(v, p+1, psy[mass_l[3]+shift]);
print "M_1(X):",M_1;
C_1 := psy[1+shift];
print "C_1(X):",C_1,"\n";

// Считаем P_2
print "P_2:\np_ = 1";
N_2 := X;
D_2 := psy[1+shift];
M_2 := psy[1+shift];
C_2 := psy[1+shift];
//print "N_2: ", N_2;
//print "D_2: ", D_2;
//print "M_2: ", M_2;
//print "C_2: ",C_2,"\n";

// Проверяем равенство P_1 + P_2 == O
if ((N_1 * D_2) mod psy[5+shift]) eq (N_2 mod psy[5+shift]) then
    if ((M_1 * C_2) mod psy[5+shift]) eq ((-M_2) mod psy[5+shift]) then
        print "return 0;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    end if;
end if;

p_ := p mod mass_l[4];
print "l = ", mass_l[4], "p_ = ", p_; 
//u := Modexp(X, p, psy[mass_l[4]+shift]);
u := X ^ p;
//print "u = ",u;
//v := Modexp(f, (p - 1) div 2, psy[mass_l[4]+shift]);
v := f ^ ((p - 1) div 2);
//print "v = ",v;
N_0 := u;
D_0 := psy[1+shift];
M_0 := v;
C_0 := psy[1+shift];
print "Point P_0:\nN_0:", N_0;
print "D_0:", D_0;
print "M_0:", M_0;
print "C_0:", C_0,"\n";

// Считаем P_1
N_1 := u ^ p;
D_1 := psy[1+shift];
M_1 := v ^ (p+1);
C_1 := psy[1+shift];

// Считаем P_2
N_2 := (X * psy[3+shift] * psy[3+shift] - f * psy[2+shift] * psy[4+shift]) mod psy[7+shift];
D_2 := (psy[3+shift] * psy[3+shift]) mod psy[7+shift];
M_2 := (psy[5+shift] * psy[2+shift] * psy[2+shift] - psy[1+shift] * psy[4+shift] * psy[4+shift]) mod psy[7+shift];
C_2 := (4 * psy[3+shift] * psy[3+shift] * psy[3+shift]) mod psy[7+shift];
print "!!!!!!P_2:\np_ % 2 != 0\n", "N_2: ", N_2, "D_2: ", D_2, "M_2: ", M_2, "C_2: ",C_2,"\n";
psy[2+shift];
psy[3+shift];
psy[4+shift];
psy[5+shift];

// Проверяем равенство P_1 + P_2 == O
if ((N_1 * D_2) mod psy[7+shift]) eq (N_2 mod psy[7+shift]) then
    if ((M_1 * C_2) mod psy[7+shift]) eq ((-M_2) mod psy[7+shift]) then
        print "return 0;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    end if;
end if;

// P_4 = P_1 + P_2 
Op1 := (N_1 * D_2) mod psy[7+shift];
Op2 := (N_2 * D_1) mod psy[7+shift];
if Op1 eq Op2 then 
    print "x1 == x2";
else
    print "x1 != x2";
end if;

// P_4   x1 != x2
a1 := C_2 * M_1 - M_2;
a2 := N_1 * D_2 - N_2;
N_4 := f * (a1^2) * (D_2^3) - (N_1 * D_2 + N_2) * (a2 ^ 2) * (C_2^2);
//N_4 := N_4 mod psy[7+shift]; 
D_4 := ((C_2 * a2) ^ 2) * D_2;
//D_4 := D_4 mod psy[7+shift];
M_4 := -(D_2 * a1 * (N_4 - N_1 * D_4) + M_1 * C_2 * D_4 * a2);
//M_4 := M_4 mod psy[7+shift];
C_4 := C_2 * D_4 * a2;
//C_4 := C_4 mod psy[7+shift];
//print "P_4:\nN_4:", N_4, "D_4:", D_4, "M_4:", M_4, "C_4:",C_4,"\n";
print "x4 = ", Evaluate(N_4, 4) / Evaluate(D_4, 4);
print "y4 = ", 22 * Evaluate(M_4, 4) / Evaluate(C_4, 4);

// P_3 = P_0
N_3 := N_0;
D_3 := D_0;
M_3 := M_0;
C_3 := C_0;

//print "P_3:\nN_3:", N_3, "D_3:", D_3, "M_3:", M_3, "C_3:", C_3,"\n";

// k = 1
Op1 := (N_4 * D_3) mod psy[7+shift];
Op2 := (N_3 * D_4) mod psy[7+shift];
if Op1 eq Op2 then
    Op1 := (M_4 * C_3) mod psy[7+shift];
    Op2 := (M_3 * C_4) mod psy[7+shift];
    if Op1 eq Op2 then
        print "return k;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", 1;
    end if;
    print "return l-k;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", 1;
end if;

// P_3 = P_3 + P_0 = 2 * P_0 при x3 == x0 y3 == y0 != 0 
a2 := D_3 * N_0 + N_3;
lambda1 := (3 * (N_0 ^ 2) + a);
lambda2 := 2 * M_0;
Evaluate(lambda1, 4) / (22 * Evaluate(lambda2, 4));
N_3_ := (lambda1 * lambda1 * D_3 - lambda2 * lambda2 * f * a2);
D_3_ := (lambda2 * lambda2 * f * D_3);
a1 := N_3_ - N_0 * D_3_;
M_3_ := (-(lambda1 * a1 + f * M_0 * lambda2 * D_3_));
C_3_ := (f * lambda2 * D_3_);
N_3 := N_3_;
D_3 := D_3_;
M_3 := M_3_;
C_3 := C_3_;
Evaluate(N_3, 4) / Evaluate(D_3, 4);
22 * Evaluate(M_3, 4) / Evaluate(C_3, 4);
//print "P_3!!!:\nN_3:", N_3, "D_3:", D_3, "M_3:", M_3, "C_3:", C_3,"\n";

// k = 2
Op1 := (N_4 * D_3) mod psy[7+shift];
Op2 := (N_3 * D_4) mod psy[7+shift];
if Op1 eq Op2 then
    Op1 := (M_4 * C_3) mod psy[7+shift];
    Op2 := (M_3 * C_4) mod psy[7+shift];
    if Op1 eq Op2 then
        print "return k;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", 1;
    end if;
    print "return l-k;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", 1;
end if;

// P_3 = P_3 + P_0 = 2 * P_0 + P_0 = (44,51) + (4, 22) x3 != x0    
a1 := N_3 + N_0 * D_3;
lambda1 := (M_3 - M_0 * C_3) * D_3;
lambda2 := (N_3 - N_0 * D_3) * C_3;
22 * Evaluate(lambda1, 4) / Evaluate(lambda2, 4);
N_3_ := (f * lambda1 * lambda1 * (D_3) - a1 * lambda2 * lambda2);
D_3_ := (lambda2 * lambda2 * D_3);
a2 := N_3_ * D_3 - N_3 * D_3_;
M_3 := (-(lambda1 * C_3 * a2 + M_3 * lambda2 * D_3_ * D_3));
C_3 := (lambda2 * D_3_ * D_3 * C_3) ;
N_3 := N_3_;
D_3 := D_3_;
Evaluate(N_3, 4) / Evaluate(D_3, 4);
22 * Evaluate(M_3, 4) / Evaluate(C_3, 4);
//print "P_3:\nN_3:", N_3, "D_3:", D_3, "M_3:", M_3, "C_3:", C_3,"\n";

// k = 3
Op1 := (N_4 * D_3) mod psy[7+shift];
Op2 := (N_3 * D_4) mod psy[7+shift];
if Op1 eq Op2 then
    Op1 := (M_4 * C_3) mod psy[7+shift];
    Op2 := (M_3 * C_4) mod psy[7+shift];
    if Op1 eq Op2 then
        print "return k;", 3;
    end if;
end if;